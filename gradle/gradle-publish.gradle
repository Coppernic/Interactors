apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'
apply plugin: "nu.studer.credentials"

String v = "$project.versioning.info.display"
String t = "$project.versioning.info.tag"

/*
dokkaJavadoc.configure {
    dokkaSourceSets {
        configureEach {
            includes.from("${project.rootProject.projectDir}/Readme.md")
            jdkVersion = 8

            sourceLink {
                // Source directory
                localDirectory.set(file("src/main/java"))

                // URL showing where the source code can be accessed through the web browser
                remoteUrl.set(java.net.URL(GITHUB_SOURCE_URL))

                // Suffix which is used to append the line number to the URL. Use #L for GitHub
                remoteLineSuffix = "#L"
            }
        }
    }
}
 */

task androidJavadocsJar(type: Jar, dependsOn: "dokkaJavadoc") {
    classifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}


String userNexus = project.hasProperty('nexusUser') ?
        project.nexusUser : (project.credentials.nexus_user ?
        project.credentials.nexus_user : (project.properties.containsKey("nexus_user") ?
        project.properties.nexus_user.toString() : (System.getenv('NEXUS_USER') ?
        System.getenv('NEXUS_USER') : "")))
String passwordNexus = project.hasProperty('nexusPassword') ?
        project.nexusPassword : (project.credentials.nexus_password ?
        project.credentials.nexus_password : (project.properties.containsKey("nexus_password") ?
        project.properties.nexus_password.toString() : (System.getenv('NEXUS_PASSWORD') ?
        System.getenv('NEXUS_PASSWORD') : "")))

def isSnapshot() {
    return versioning.info.display.contains("SNAPSHOT") || versioning.info.dirty
}


def pomConfig = {
    licenses {
        license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
        }
    }
    developers {
        developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
        }
    }
    scm {
        url POM_SCM_URL
        connection POM_SCM_CONNECTION
    }
}

publishing {
    publications {
        art(MavenPublication) {
            // add rootProject name to get Group ID: com.github.coppernic.Interactors as we get in jitpack
            groupId "$GROUP.${rootProject.name}"
            artifactId "${project.name}"
            version versioning.info.display

            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "release") {
                    variant.outputs.all {
                        logger.info "Artifact : ${it.outputFile}"
                        artifact(it.outputFile)
                    }
                }
            }

            artifact androidSourcesJar
            artifact androidJavadocsJar

            // Customize pom with dependencies
            pom.withXml {
                def root = asNode()
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('name', rootProject.name)
                root.appendNode('url', POM_URL)
                root.children().last() + pomConfig
                def dependenciesNode = root.appendNode('dependencies')

                project.configurations.implementation.allDependencies.each {
                    if (it instanceof ExternalModuleDependency
                            && it.group != null
                            && it.name != null) {

                        logger.info "dependency : ${it}\nartifact : " +
                                "${it.getArtifacts().collect { a -> "${a.name}, ${a.type}, ${a.url}, ${a.extension}, ${a.classifier}" }.join(', ')}"

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (it.getArtifacts().size() > 0) {
                            dependencyNode.appendNode('type', it.getArtifacts()[0].type)
                        }

                        //If there are any exclusions in dependency
                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            String urlRelease = "https://nexus.coppernic.fr/repository/libs-release-coppernic/"
            String urlSnapshot = "https://nexus.coppernic.fr/repository/libs-snapshot-coppernic/"
            url = (isSnapshot() ? urlSnapshot : urlRelease)
            credentials {
                username = userNexus
                password = passwordNexus
            }
        }
    }
}
