
plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "fr.coppernic.versioning" version "3.1.2"
}

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'fr.coppernic.extensions'


def pomConfig = {
    licenses {
        license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
        }
    }
    developers {
        developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
        }
    }
    scm {
        url POM_SCM_URL
        connection POM_SCM_CONNECTION
    }
}

copper {
    android {
        projectGroup = GROUP
    }
    publications {
        skipForVariant = { variant ->
            if (variant.buildType.name == "debug") {
                return true
            }
            return false
        }
        publicationHook = {
            it.pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
        }
    }
}

apply plugin: 'fr.coppernic.android'

repositories {
    google()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://artifactory.coppernic.fr/artifactory/libs-release' }
}


task checkstyle(type: Checkstyle) {
    configFile rootProject.file('config/checkstyle.xml')
    source 'src/main/java'
    ignoreFailures false
    showViolations true
    include '**/*.java'

    classpath = files()
}

afterEvaluate {
    if (project.tasks.findByName('check')) {
        check.dependsOn('checkstyle')
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode versioning.info.versionCode
        versionName versioning.info.display

        // Special build type for testing
        testBuildType "staging"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ext.alwaysUpdateBuildId = false
        }
        // Barista and espresso needs minSdkVersion > 18, we create a special builtType for androidTest
        staging {
            initWith(buildTypes.debug) // keep versionName and PIN from 'debug'
            defaultConfig.minSdkVersion 19
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
        exclude 'META-INF/lib_release.kotlin_module'
    }
}

String support = "27.1.1"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Coppernic
    implementation 'fr.coppernic.sdk.cpcutils:CpcUtilsLib:6.18.4'
    implementation 'fr.coppernic.sdk.core:CpcCore:1.8.17'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'

    // Dagger
    compileOnly 'com.google.dagger:dagger:2.16'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.awaitility:awaitility:3.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'org.amshove.kluent:kluent:1.56'
    testImplementation 'androidx.test:core:1.2.0'

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'org.awaitility:awaitility:3.0.0'
    androidTestImplementation('com.schibsted.spain:barista:3.2.0') {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion support
            }
        }
    }
}
String v = "$project.versioning.info.display"
String t = "$project.versioning.info.tag"

bintray {
    user = project.hasProperty("bintray_user") ? project.bintray_user : ""
    key = project.hasProperty("bintray_key") ? project.bintray_key : ""
    publish = true
    pkg {
        repo = BINTRAY_REPO
        name = rootProject.name
        userOrg = BINTRAY_ORG
        licenses = ["Apache-2.0"]
        labels = BINTRAY_LABELS.split(',')
        vcsUrl = POM_SCM_URL
        websiteUrl = POM_URL
        issueTrackerUrl = POM_ISSUES_URL
        githubRepo = GITHUB_REPO //Optional Github repository
        githubReleaseNotesFile = GITHUB_README //Optional Github readme file
        version {
            name = v
            desc = POM_DESCRIPTION
            released = new Date()
            vcsTag = t
        }
    }
}

// Add publications to bintray
afterEvaluate {
    bintray.publications = project.publishing.publications.collect {
        it.name
    }
}
